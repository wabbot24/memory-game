{"version":3,"sources":["components/navbar/navbar.module.css","components/ImageCard/index.js","components/Wrapper/index.js","components/navbar/index.js","components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","title","message","score","currentScore","topScore","ImageCard","props","react_default","a","createElement","className","onClick","checkScore","shuffleImages","id","alt","name","src","image","Wrapper","children","Navbar","styles","Footer","App","state","images","clickedArray","shuffle","array","i","length","j","Math","floor","random","_ref","event","parseInt","target","shuffledImages","_this","setState","clickedId","clicked","firstClick","undefined","includes","alert","push","concat","_this2","this","navbar","components_Wrapper","map","pic","components_ImageCard","key","Footer_footer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cefbcc99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"navbar_container__36nDR\",\"title\":\"navbar_title__2XXEw\",\"message\":\"navbar_message__3gWly\",\"score\":\"navbar_score__2tfyh\",\"currentScore\":\"navbar_currentScore__2PatP\",\"topScore\":\"navbar_topScore__1jWag\"};","import React from \"react\";\nimport \"./style.css\";\n\nfunction ImageCard(props) {\n  return (\n    \n    <div className=\"card\" onClick={props.checkScore}>\n      <div className=\"img-containers\" onClick={props.shuffleImages}>\n        <img id={props.id} alt={props.name} src={props.image} />\n      </div>\n\n     \n    </div>\n  );\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport styles from \"./navbar.module.css\"\n\nfunction Navbar(props) {\n    return (\n        <nav className={styles.container}>\n            <span className={styles.title}>Simpson's Memory Game</span>\n            <span className={styles.message}>{props.message}</span>\n            <div className={styles.score}>\n                <span id={styles.currentScore}>Your Score: {props.score}</span>\n                <span id={styles.topScore}>Top Score: {props.topScore}</span>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./footer.css\"\n\nfunction Footer (props) {\n    return (\n        <span className=\"messageOverflow\">{props.message}</span>\n    )\n}\n\nexport default Footer;\n\n","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard/index\";\nimport Wrapper from \"./components/Wrapper/index\";\nimport images from \"./data.json\";\nimport Navbar from \"./components/navbar/index\"\nimport Footer from \"./components/Footer/footer\"\n\nclass App extends Component {\n  state = {\n    images,\n    clickedArray: [],\n    topScore: 0,\n    score: 0,\n    message: \"Click an image to begin. Click all 12 with no duplicates to win!\",\n    shuffle: \"false\"\n  };\n\n  shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]]; // swap elements\n    }\n    return array;\n  }\n\n  shuffleImages = event => {\n    let id = parseInt(event.target.id);\n    let shuffledImages = this.shuffle(this.state.images);\n    this.setState({ shuffledImages });\n  }\n\n  checkScore = event => {\n    let clickedId = event.target.id;\n\n    let clicked = this.state.clickedArray;\n\n    let firstClick = false;\n    if (clicked[0] === undefined) {\n      firstClick = true;\n      this.setState({\n        message: \"That's one! Keep good track!\"\n      })\n    }\n\n    if (clicked.includes(clickedId)) {\n      // added this alert because I didn't get the navbar fully functional\n      alert(\"That's a repeat Character! You're lucky I only included 12. try again!\");\n\n      this.setState({\n        score: 0,\n        clickedArray: [],\n        message: \"Do better this time.\"\n      })\n    }\n    else {\n      this.state.clickedArray.push(clickedId);\n      // console.log(this.state.clickedArray);\n      if (this.state.score + 1 > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score + 1\n        })\n      }\n      if (!firstClick) {\n        this.setState({\n          message: `Keep going! Only ${11 - this.state.score} to go!`\n        })\n      }\n      this.setState({\n        clicked: this.state.clickedArray,\n        score: this.state.score + 1\n      });\n\n    }\n\n    if (this.state.clickedArray.length === 12) {\n      // added this alert because I didn't get the navbar fully functional\n      // alert(\"You know your Simpsons! But can you do it 662 times for each Simpsons episode?\");\n      this.setState({\n        clickedArray: [],\n        score: 0,\n        message: \"You know your Simpsons! But can you do it 662 times for each Simpsons episode?\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Navbar\n        message = {this.state.message}\n        score ={this.state.score}\n        topScore={this.state.topScore}\n        />\n\n        <Wrapper>\n          {this.state.images.map(pic => (\n            <ImageCard\n              shuffleImages={this.shuffleImages}\n              checkScore={this.checkScore}\n              id={pic.id}\n              key={pic.id}\n              name={pic.name}\n              image={pic.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer message = {this.state.message} />   \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}